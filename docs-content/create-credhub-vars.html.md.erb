---
title: Creating New Variables in CredHub
owner: CredHub
---

This topic explains how CredHub manages variables in the context of a larger deployment, and how to create new variables for use in CredHub. 

## Background

Ops Manager supports a new top-level key in the product template called <code>variables</code>. Tile Authors can define variables in this section as follows: 

<pre class="code">
variables:
  - name: EXAMPLE-CREDHUB-PASSWORD
    type: password
</pre>

You can reference these variables in the manifest snippets in their tile metadata using a triple parentheses syntax: 

<code>((( EXAMPLE-CREDHUB-PASSWORD )))</code>  

This new triple parentheses syntax differentiates between Ops Manager’s and BOSH’s double parentheses syntaxes. Using triple parentheses lets Ops Manager identify CredHub variables while still supporting BOSH’s double parentheses syntax. 

A variable referenced within triple parentheses is replaced by double parentheses in the generated manifest. After contacting CredHub, BOSH populates that variable value internally.

The benefit of this approach is that the YAML file on disk in Ops Manager does not contain sensitive credentials when the metadata manifest snippets have triple parentheses. The resulting manifest file contains variables within double parentheses, rather than unobscured credentials.

## How CredHub Works Within a Deployment

CredHub is distributed as a BOSH release. As part of this installation, Ops Manager co-locates the CredHub release on the Ops Manager Director, including the CredHub job configurations, and the Director is configured to point to the CredHub API.

Once CredHub has been deployed and configured on the Director, any Director deployment can use CredHub variables in place of credential values. Using variables, rather than values, provides an extra layer of security when transmitting credentials within your deployment.

## Changing Your Deployment Manifest to Include CredHub Variables

When CredHub is enabled on the Ops Manager Director, it interpolates credential values into manifests that use the <code>((variables))</code> syntax. When the Director encounters a variable using this syntax, it requests the credential value from CredHub. If the credential does not exist and the release or manifest contains generation properties, the credential value is generated automatically.

The manifest excerpt below includes references to two credentials, <code>EXAMPLE-PASSWORD</code> and <code>EXAMPLE-TLS</code>. 

When this manifest is deployed, the Ops Manager Director retrieves the stored variables and replaces them with the credential values associated with each variable. The <code>EXAMPLE-TLS</code> variables include property accessors, so only the certificate and private_key components will be interpolated.

<pre class="code">
name: demo-deploy

instance_groups:
  jobs: 
  - name: demo 
    release: demo
    properties:
      demo:
        password: ((EXAMPLE-PASSWORD))
        tls: 
          certificate: ((EXAMPLE-TLS.certificate))
          private_key: ((EXAMPLE-TLS.private_key))
</pre>

OpsManager configures the Director to generate a credential if it does not exist. The manifest includes generation parameters that define how the credential should be generated. These generation parameters are defined in the variables section as shown below.

<pre class="code">
---
name: demo deploy 

variables: 
- name: EXAMPLE-PASSWORD
  type: password
- name: EXAMPLE-CA
  type: certificate
  options: 
    is_ca: true
    common_name: 'Example Certificate Authority'
- name: EXAMPLE-TLS
  type: certificate
  options: 
    ca: EXAMPLE-CA
    common_name: example.com

instance_groups:
  jobs: 
  - name: demo 
    release: demo
    properties:
      demo:
        password: ((EXAMPLE-PASSWORD))
        tls: 
          certificate: ((EXAMPLE-TLS.certificate))
          private_key: ((EXAMPLE-TLS.private_key))
</pre>

## Variable Namespacing

Deployment manifests often use common variable names; for example, <code>((password))</code>. To avoid variable name collisions between deployments, the Ops Manager Director automatically stores variables with the Ops Manager Director's name and deployment name. For example, the variable <code>((example-password))</code> will be stored in CredHub as /Ops-Manager-Director-name/deployment-name/example-password.

### Other Namespacing Options

Use a [BOSH link](../../tiledev/release-notes-1-11.html#bosh-links) to share credentials across deployments. Alternatively, if you want to use an exact name, prefixing the variable with a forward slash (/) will cause the Director to use the exact name you type. An example of a precisely typed variable follows.

<pre class="code">((/EXAMPLE-PASSWORD))</pre>