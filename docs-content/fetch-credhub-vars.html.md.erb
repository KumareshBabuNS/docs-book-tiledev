---
title: Manually Fetching Credentials
owner: CredHub
---

_This topic assumes you are using Ops Manager v1.10 or later._

<p class="note"><strong>Note</strong>: Use the following procedure only if you use
Ops Manager to generate manifests that you deploy manually with BOSH.</p>

This topic explains how to fetch the staged credentials from your deployment using the Ops Manager API.

Ops Manager v1.10 introduced the `/commit` API endpoint.
You can use this endpoint to fetch credentials from your deployment so that you can
manually load them into CredHub.

## Procedure

In the steps below, replace `MY-DOMAIN` with your deployment domain and replace `MY-TOKEN` with your UAA access API token.

1. Enter the following `curl` command to commit the staged deployment:

    ```curl
    $ curl "https://MY-DOMAIN.com/api/v0/staged/installations/commit" \ 
        -X POST \ 
        -H "Authorization: Bearer MY-TOKEN" \ 
        -H "Content-Type: application/json" \ 
        -d '{ "ignore_warnings": true }'
    ```
    * Set `ignore_warnings` to `true` to bypass warnings or `false` to enable warnings.

    A successful commit returns the following response:

    ```
    HTTP/1.1 200 OK

    { }
    ```

1. Enter the following `curl` command to fetch the manifest for a deployed product:

    ```
    $ curl "https://MY-DOMAIN.com/api/v0/deployed/products/PRODUCT-GUID/manifest" \ 
        -X GET \ 
        -H "Authorization: Bearer MY-TOKEN"
    ```
    * Replace `PRODUCT-GUID` with the GUID of the deployed product.

    A successful request returns the product manifest, formatted in JSON:
    
    ```
    HTTP/1.1 200 OK

    {
      "name": "PRODUCT-NAME",
      "director_uuid": "ignore",
      "releases": [
        {
          "name": "PRODUCT-RELEASE-NAME",
          "version": "PRODUCT-RELEASE-VERSION"
        }
      ],
      "networks": [
        {
          "name": "default",
          "subnets": [
            {
              "range": "192.168.163.0/24",
              "gateway": "192.168.163.2",
              "dns": [
                "192.168.163.3",
                "192.168.163.1"
              ],
    ...
    }
    ```

1. Repeat the previous step for each product in your deployment.

1. Enter the following `curl` command to request the credentials from your deployment in CredHub format:

    ```
    $ curl "https://MY-DOMAIN.com/api/v0/staged/products/credhub_credentials" \ 
        -X GET \ 
        -H "Authorization: Bearer MY-TOKEN"
    ```

    A successful request returns all the credentials from your deployment, formatted as a YAML file:
    
    ```
    HTTP/1.1 200 OK

    RESPONSE HEADERS:
      Content-Type: application/x-yaml; charset=utf-8
    RESPONSE BODY:
    ---
    credentials:
    - name: "/PRODUCT-NAME/PRODUCT-GUID/CREDHUB-SECRET-VARIABLE"
      type: password
      value: EXAMPLE-PASSWORD
    - name: "/PRODUCT-NAME/PRODUCT-GUID/CREDHUB-RSA-VARIABLE"
      type: rsa
      value:
        public_key: |
          -----BEGIN PUBLIC KEY-----
          RSA-PUBLIC-KEY-CONTENTS
          -----END PUBLIC KEY-----
        private_key: |
          -----BEGIN RSA PRIVATE KEY-----
          RSA-PRIVATE-KEY-CONTENTS
          -----END RSA PRIVATE KEY-----
    - name: "/PRODUCT-NAME/PRODUCT-GUID/CREDHUB-SIMPLE-CREDENTIAL-VARIABLE"
      type: user
      value:
        username: EXAMPLE-USERNAME
        password: EXAMPLE-PASSWORD
    ```
    <p class="note"><strong>Note</strong>: In the output above, <code>type</code> refers to the
    CredHub variable type rather than the BOSH variable type.</p>

1. Migrate the downloaded credentials to CredHub. See [Migrating Existing Credentials to CredHub](./migrating-credhub-credentials.html)
for more information.

1. Enter the following `curl` command to remove the staged installation files:

    ```
    $ curl "https://MY-DOMAIN.com/api/v0/staged/installations/commit" \ 
        -X DELETE \ 
        -H "Authorization: Bearer MY-TOKEN" \ 
    ```
